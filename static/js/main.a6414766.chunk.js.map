{"version":3,"sources":["Saly-10.png","Components/Content/Home.jsx","Components/Content/DOM/DOM.jsx","Components/Question.jsx","Components/Content/DOM/ManiputatingDOMQuestions.jsx","Components/Content/DOM/IntroductionDOMQuestions.jsx","Components/Content/DOM/TraversingDOMQuestions.jsx","Components/Content/DOM/Events.jsx","Components/Content/DOM/AddEventListener.jsx","Components/Content/DOM/RemoveEventListener.jsx","Components/Content/DOM/Propagation.jsx","Components/Content/DOM/UserBrowserEvents.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Home","className","src","mainImage","alt","Dom","to","Container","styled","div","QuestionCard","myContext","React","createContext","reducer","state","action","type","showAnswer","Question","question","answer","useReducer","dispatch","Provider","dangerouslySetInnerHTML","__html","onClick","questions","DOMManipulating","map","q","DOMIntroduction","TraversingDOMQuestions","Events","AddEventListener","RemoveEventListener","Propagation","UserBrowserEvents","props","useRouteMatch","path","url","component","App","useState","exact","BrowserEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAAe,MAA0B,oC,OCW1BA,MATf,WACI,OACI,sBAAKC,UAAU,aAAf,UACI,oBAAIA,UAAU,wBAAd,sDACA,qBAAKA,UAAU,wBAAwBC,IAAKC,EAAWC,IAAI,SCaxDC,I,IAAAA,EAhBf,WACI,OACI,mCACI,qBAAIJ,UAAU,oBAAd,UACI,oBAAIA,UAAU,kBAAd,SAAgC,cAAC,IAAD,CAAMK,GAAG,oBAAT,4BAChC,oBAAIL,UAAU,kBAAd,SAAgC,cAAC,IAAD,CAAMK,GAAG,oBAAT,4BAChC,oBAAIL,UAAU,kBAAd,SAAgC,cAAC,IAAD,CAAMK,GAAG,kBAAT,0BAChC,oBAAIL,UAAU,kBAAd,SAAgC,cAAC,IAAD,CAAMK,GAAG,qBAAT,mC,gBCP1CC,EAAYC,IAAOC,IAAV,kDAITC,EAAeF,IAAOC,IAAV,4DAKLE,EAAYC,IAAMC,gBAEzBC,EAAU,SAACC,EAAOC,GACtB,MACO,qBADCA,EAAOC,KAEJ,CAAEC,YAAaH,EAAMG,YAGrBH,GAKE,SAASI,EAAT,GAAyC,IAArBC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,OAC3C,EAA0BC,qBAAWR,EAAS,CAAEI,YAAY,IAA5D,mBAAOH,EAAP,KAAcQ,EAAd,KAEA,OACE,mCACE,cAACZ,EAAUa,SAAX,UACE,cAACjB,EAAD,UACE,eAACG,EAAD,WACE,6BAAKU,IACJL,EAAMG,YACL,mBAAGO,wBAAyB,CAACC,OAAQL,KAGvC,wBAAQM,QAAS,kBAAMJ,EAAS,CAAEN,KAAM,sBAAxC,SACGF,EAAMG,WAAa,cAAgB,yBCpClD,IAAIU,EAAY,CACZ,CACIR,SAAU,sBACVC,OAAO,qGAKX,CACID,SAAU,yBACVC,OAAO,oHAKX,CACID,SAAU,iDACVC,OAAO,uRAMX,CACID,SAAU,mCACVC,OAAO,0FAKX,CACID,SAAU,kCACVC,OAAO,0HAIX,CACID,SAAU,+BACVC,OAAO,oGAIX,CACID,SAAU,0CACVC,OAAO,yCAGX,CACID,SAAU,gCACVC,OAAO,gHAOA,SAASQ,IACpB,OAAO,6BACFD,EAAUE,KAAI,SAACC,GAAD,OACX,cAACZ,EAAD,CAAUC,SAAUW,EAAEX,SAAUC,OAAQU,EAAEV,cC3DtD,IAAIO,EAAY,CACZ,CACIR,SAAU,mBACVC,OAAO,iKAIX,CACID,SAAU,kDACVC,OAAO,sCAIX,CACID,SAAU,iDACVC,OAAO,gJAIX,CACID,SAAU,2EACVC,OAAO,yLAOX,CACID,SAAU,oDACVC,OAAO,oMAIX,CACID,SAAU,yCACVC,OAAO,kLAGX,CACID,SAAU,qEACVC,OAAO,mKAIX,CACID,SAAU,gCACVC,OAAO,2PAGX,CACID,SAAU,6BACVC,OAAO,8OAGX,CACID,SAAU,uBACVC,OAAO,+NAMX,CACID,SAAU,gCACVC,OAAO,qJAKX,CACID,SAAU,uBACVC,OAAO,uKAKX,CACID,SAAU,oCACVC,OAAO,mNAKX,CACID,SAAU,8BACVC,OAAO,qNAKX,CACID,SAAU,wBACVC,OAAO,yKAKX,CACID,SAAU,iBACVC,OAAO,8SAQA,SAASW,IACpB,OAAO,6BACFJ,EAAUE,KAAI,SAACC,GAAD,OACX,cAACZ,EAAD,CAAUC,SAAUW,EAAEX,SAAUC,OAAQU,EAAEV,cC/GtD,IAAIO,EAAY,CACZ,CACIR,SAAU,2BACVC,OAAO,+DAIX,CACID,SAAU,2BACVC,OAAO,0DAIX,CACID,SAAU,sBACVC,OAAO,iEAKX,CACID,SAAU,qEACVC,OAAO,8DAMA,SAASY,IACpB,OAAO,6BACFL,EAAUE,KAAI,SAACC,GAAD,OACX,cAACZ,EAAD,CAAUC,SAAUW,EAAEX,SAAUC,OAAQU,EAAEV,cC/BtD,IAAIO,EAAY,CACZ,CACIR,SAAU,kBACVC,OAAO,+EAIX,CACID,SAAU,qCACVC,OAAO,iJAKX,CACID,SAAU,mCACVC,OAAO,mZAUX,CACID,SAAU,0BACVC,OAAO,4DAKX,CACID,SAAU,uCACVC,OAAO,iFAIX,CACID,SAAU,0CACVC,OAAO,mtBAaX,CACID,SAAU,6BACVC,OAAO,+IAIX,CACID,SAAU,qCACVC,OAAO,+IAGX,CACID,SAAU,8BACVC,OAAO,2HAGX,CACID,SAAU,0CACVC,OAAO,qJAGX,CACID,SAAU,gCACVC,OAAO,6JAKX,CACID,SAAU,2CACVC,OAAO,qVAQA,SAASa,IACpB,OAAO,6BACFN,EAAUE,KAAI,SAACC,GAAD,OACX,cAACZ,EAAD,CAAUC,SAAUW,EAAEX,SAAUC,OAAQU,EAAEV,cC/FtD,IAAIO,EAAY,CACZ,CACIR,SAAU,6BACVC,OAAO,+EAIX,CACID,SAAU,qCACVC,OAAO,iJAKX,CACID,SAAU,mCACVC,OAAO,mZAUX,CACID,SAAU,0BACVC,OAAO,4DAKX,CACID,SAAU,uCACVC,OAAO,iFAIX,CACID,SAAU,0CACVC,OAAO,mtBAaX,CACID,SAAU,6BACVC,OAAO,+IAIX,CACID,SAAU,qCACVC,OAAO,+IAGX,CACID,SAAU,8BACVC,OAAO,2HAGX,CACID,SAAU,0CACVC,OAAO,qJAGX,CACID,SAAU,gCACVC,OAAO,6JAKX,CACID,SAAU,2CACVC,OAAO,qVAQA,SAASc,IACpB,OAAO,6BACFP,EAAUE,KAAI,SAACC,GAAD,OACX,cAACZ,EAAD,CAAUC,SAAUW,EAAEX,SAAUC,OAAQU,EAAEV,cC/FtD,IAAIO,EAAY,CACZ,CACIR,SAAU,iCACVC,OAAO,+EAIX,CACID,SAAU,qCACVC,OAAO,iJAKX,CACID,SAAU,mCACVC,OAAO,mZAUX,CACID,SAAU,0BACVC,OAAO,4DAKX,CACID,SAAU,uCACVC,OAAO,iFAIX,CACID,SAAU,0CACVC,OAAO,mtBAaX,CACID,SAAU,6BACVC,OAAO,+IAIX,CACID,SAAU,qCACVC,OAAO,+IAGX,CACID,SAAU,8BACVC,OAAO,2HAGX,CACID,SAAU,0CACVC,OAAO,qJAGX,CACID,SAAU,gCACVC,OAAO,6JAKX,CACID,SAAU,2CACVC,OAAO,qVAQA,SAASe,IACpB,OAAO,6BACFR,EAAUE,KAAI,SAACC,GAAD,OACX,cAACZ,EAAD,CAAUC,SAAUW,EAAEX,SAAUC,OAAQU,EAAEV,cC/FtD,IAAIO,EAAY,CACZ,CACIR,SAAU,+BACVC,OAAO,+EAIX,CACID,SAAU,qCACVC,OAAO,iJAKX,CACID,SAAU,mCACVC,OAAO,mZAUX,CACID,SAAU,0BACVC,OAAO,4DAKX,CACID,SAAU,uCACVC,OAAO,iFAIX,CACID,SAAU,0CACVC,OAAO,mtBAaX,CACID,SAAU,6BACVC,OAAO,+IAIX,CACID,SAAU,qCACVC,OAAO,+IAGX,CACID,SAAU,8BACVC,OAAO,2HAGX,CACID,SAAU,0CACVC,OAAO,qJAGX,CACID,SAAU,gCACVC,OAAO,6JAKX,CACID,SAAU,2CACVC,OAAO,qVAQA,SAASgB,IACpB,OAAO,6BACFT,EAAUE,KAAI,SAACC,GAAD,OACX,cAACZ,EAAD,CAAUC,SAAUW,EAAEX,SAAUC,OAAQU,EAAEV,cC5DvCiB,MA9Bf,SAA2BC,GACvB,MAAoBC,cAAbC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,IACb,OACI,qCACI,gDACA,+BACI,6BACI,cAAC,IAAD,CAAMpC,GAAE,UAAKoC,EAAL,WAAR,sBAEJ,6BACI,cAAC,IAAD,CAAMpC,GAAE,UAAKoC,EAAL,qBAAR,gCAEJ,6BACI,cAAC,IAAD,CAAMpC,GAAE,UAAKoC,EAAL,wBAAR,mCAEJ,6BACI,cAAC,IAAD,CAAMpC,GAAE,UAAKoC,EAAL,gBAAR,8BAIR,eAAC,IAAD,WACI,cAAC,IAAD,CAAOD,KAAI,UAAKA,EAAL,WAAoBE,UAAWT,IAC1C,cAAC,IAAD,CAAOO,KAAI,UAAKA,EAAL,qBAA8BE,UAAWR,IACpD,cAAC,IAAD,CAAOM,KAAI,UAAKA,EAAL,wBAAiCE,UAAWP,IACvD,cAAC,IAAD,CAAOK,KAAI,UAAKA,EAAL,gBAAyBE,UAAWN,WCmBhDO,MAvCf,WACI,MAAsCC,mBAAS,OAA/C,mBAKA,OALA,UAMI,eAAC,IAAD,WACI,qBAAI5C,UAAU,gBAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAM6C,OAAK,EAAC7C,UAAU,kBAAkB,eAAa,OAAOK,GAAG,IAA/D,oBAEJ,oBAAIL,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWK,GAAG,OAA9B,mBAEJ,oBAAIL,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWK,GAAG,WAA9B,uBAEJ,oBAAIL,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWK,GAAG,WAA9B,uBAEJ,oBAAIL,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWK,GAAG,QAA9B,uBAIR,eAAC,IAAD,WACI,cAAC,IAAD,CAAOmC,KAAK,IAAIK,OAAK,EAACH,UAAW3C,IACjC,cAAC,IAAD,CAAOyC,KAAK,OAAQE,UAAWtC,IAC/B,cAAC,IAAD,CAAOoC,KAAK,oBAAoBE,UAAWX,IAC3C,cAAC,IAAD,CAAOS,KAAK,oBAAoBE,UAAWd,IAC3C,cAAC,IAAD,CAAOY,KAAK,kBAAkBE,UAAWV,IACzC,cAAC,IAAD,CAAOQ,KAAK,qBAAqBE,UAAWI,WChC7CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6414766.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Saly-10.5b1bc29f.png\";","import React from 'react';\nimport mainImage from '../../Saly-10.png'\nfunction Home() {\n    return (\n        <div className=\"container \">\n            <h1 className=\"text-center mt-4 mb-4\">Welcome to Learning JavaScript is funny!</h1>\n            <img className=\"img-thumbnail rounded\" src={mainImage} alt=\"\"/>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nfunction Dom() {\n    return (\n        <>\n            <ul className=\"list-group m-md-5\">\n                <li className=\"list-group-item\"><Link to=\"/dom/introduction\">Introduction</Link></li>\n                <li className=\"list-group-item\"><Link to=\"/dom/manipulating\">Manipulating</Link></li>\n                <li className=\"list-group-item\"><Link to=\"/dom/traversing\">Traversing</Link></li>\n                <li className=\"list-group-item\"><Link to=\"/dom/browserEvents\">BrowserEvents</Link></li>\n\n\n\n            </ul>\n        </>\n    );\n}\n\nexport default Dom;","import React, { useReducer } from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  margin: 2rem 8rem;\n`;\n\nconst QuestionCard = styled.div`\n  //background-color: #ddffe7;\n`;\n\n// -----=^.^-=----- 1 - Step creat the Context and store it in a const;\nexport const myContext = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"toggleShowAnswer\":\n      return { showAnswer: !state.showAnswer };\n\n    default:\n      return state;\n  }\n};\n\n// -----=^.^-=----- 2 - Step create the providers\nexport default function Question({ question, answer }) {\n  const [state, dispatch] = useReducer(reducer, { showAnswer: false });\n\n  return (\n    <>\n      <myContext.Provider>\n        <Container>\n          <QuestionCard>\n            <h4>{question}</h4>\n            {state.showAnswer && (\n              <p dangerouslySetInnerHTML={{__html: answer}}/>\n            )}\n\n            <button onClick={() => dispatch({ type: \"toggleShowAnswer\" })}>\n              {state.showAnswer ? \"Hide Answer\" : \"Show Answer\"}\n            </button>\n          </QuestionCard>\n        </Container>\n      </myContext.Provider>\n    </>\n  );\n}\n","import Question from \"../../Question.jsx\";\nimport React from \"react\";\n\nlet questions = [\n    {\n        question: \"How to add a class?\",\n        answer:\n            `let p = document.querySelector(\"p\");<br>\n              p.classList.add(\"pinkColor\", \"newClass\");`,\n\n    },\n    {\n        question: \"How to remove a class?\",\n        answer:\n            `let leftDiv = document.querySelector(\".left\");<br>\n             leftDiv.classList.remove(\"left\", \"container\"); `,\n\n    },\n    {\n        question: \"How to use the toggle to (add/remove) a class?\",\n        answer:\n            ` listItems[0].classList.toggle(\"red\"); <br>\n               *** Note: classList property can be used only for one element.\n               if you have a collection of elements, first make a loop over them and \n               use classList for every element inside the array.`,\n    },\n    {\n        question: \"What does the element.InnerText?\",\n        answer:\n            `  Return the text of that element. <br>\n               p.innerText += \"New content\"; `,\n\n    },\n    {\n        question: \"What does the element.innerHTML\",\n        answer:\n            `Return the  content of an element.  <br>\n             rightDiv.innerHTML += \"<strong>This is a new content</strong>\".`,\n    },\n    {\n        question: \"How to create HTML elements \",\n        answer:\n            ` let button = document.createElement(\"button\");<br>\n               button.innerText = \"Submit\";`,\n    },\n    {\n        question: \"How to append one element into another?\",\n        answer:\n            `   parentElement.append(childElement)`,\n    },\n    {\n        question: \"How create unknown elements? \",\n        answer:\n            `  let myElem = document.createElement(\"name\"); <br>\n               myElem.innerText = \"Some text here...\";`,\n    },\n\n];\n\nexport default function DOMManipulating() {\n    return <ul>\n        {questions.map((q) => (\n            <Question question={q.question} answer={q.answer}/>\n        ))}\n    </ul>\n}","import Question from \"../../Question\";\nimport React from \"react\";\n\nlet questions = [\n    {\n        question: \"What is the DOM?\",\n        answer:\n            `DOM stands for the Document Object Model. It’s the API for HTML and XML documents. The DOM is a tool for manipulating data, not a data structure itself.`,\n\n    },\n    {\n        question: \"Which object represents the DOM in the browser?\",\n        answer:\n            `The JavaScript \"document\" object. `,\n\n    },\n    {\n        question: \"How it's possible to  manipulate the DOM tree?\",\n        answer:\n            ` by finding elements in the DOM tree and then manipulate them by calling the methods or set the properties on the object that’s found. `,\n\n    },\n    {\n        question: \"Which methods allow us to get a HTML element into a JavaScript variable?\",\n        answer:\n            ` -document.getElementById(); <br>\n              - document.getElementByClassName(); <br>\n              - document.querySelector(); <br>\n              - document.querySelectorAll `,\n\n    },\n    {\n        question: \"A “root” object (window) has two roles:\",\n        answer:\n            `1 - First, it is a global object for JavaScript code, as described in the chapter Global object.<br>2 - Second, it represents the “browser window” and provides methods to control it.`,\n\n    },\n    {\n        question: \"DOM Object Model (DOM), represents... \",\n        answer:\n            ` All page content as objects that can be modified. The document object is the main “entry point” to the page. We can change or create anything on the page using it.`,\n    },\n    {\n        question: \"How it's possible to manipulate a group of objects in JavaScript? \",\n        answer:\n            `  By using document.querySelectorAll to select a group of elements by CSS selector. It returns an array-like object which we can iterate through change things.`,\n    },\n\n    {\n        question: \"What is a DOM implementation?\",\n        answer:\n            ` A DOM implementation (also called a host implementation) is that piece of software which takes the parsed XML or HTML document and makes it available for processing via the DOM interfaces. A browser contains a hosting implementation, for example.`,\n    },\n    {\n        question: \"What is a DOM application?\",\n        answer:\n            ` A DOM application (also called a client application) is that piece of software which takes the document made available by the implementation, and does something to it. A script which runs in a browser is an example of an application.`,\n    },\n    {\n        question: \" What is Javascript?\",\n        answer:\n            `  - It is a scripting language <br>\n               - It is used for web <br>\n               - It makes the web page alive ( more interactive)  <br>\n               - Dont need special preparation or compilation to run`,\n    },\n    {\n        question: \" Why is it called JavaScript?\",\n        answer:\n            `  - No relationship to Java <br>\n               - It's only a marketing strategy <br>\n               - Initially it was called livescript  <br>`,\n    },\n    {\n        question: \" What is ECMAScript?\",\n        answer:\n            `  - specification of javascript <br>\n               - it describe the javascript constructs <br>\n               - the popular version ECMA-6 (release 2015)  <br>`,\n    },\n    {\n        question: \" Javascript execution environment\",\n        answer:\n            `  - every environment that support JS <br>\n               - initially it was designed only for web browsers <br>\n               - Now we can execute the javascript code on Nodejs environment as well.  <br>`,\n    },\n    {\n        question: \" What is Javascript engine?\",\n        answer:\n            `  - JS engine is responsible to execute the JS code <br>\n               - It is exist inside the browser and Nodejs <br>\n               - V8 in chrome/Opera  but SpiderMonkey in firefox and chakra in IE <br>`,\n    },\n    {\n        question: \" How do engines work?\",\n        answer:\n            `  1. reading the script (parsing) <br>\n               2. convert the code into machine language <br>\n               3. machine can runs the code, pretty fast. <br>`,\n    },\n    {\n        question: \" Window object\",\n        answer:\n            `  - it's a top level global object <br>\n               - everything from our webpage exist in the windows <br>\n               - it contains document object which is one of important objects for DOM <br>\n               - it is a platform specific object and designed only for browsers not Nodejs`,\n    },\n];\n\nexport default function DOMIntroduction() {\n    return <ul>\n        {questions.map((q) => (\n            <Question question={q.question} answer={q.answer}/>\n        ))}\n    </ul>\n}","import Question from \"../../Question\";\nimport React from \"react\";\n\nlet questions = [\n    {\n        question: \"What's means Traversing?\",\n        answer:\n            `Traversing: Means jumping from one element to its relative.`,\n\n    },\n    {\n        question: \"What means node objects?\",\n        answer:\n            `The node objects means any type of object in DOM tree.`,\n\n    },\n    {\n        question: \"What means Element?\",\n        answer:\n            ` Element is a particular type of node which is a HTML tag.\n `,\n\n    },\n    {\n        question: \"What is the return value from the Element.closest('css-selector')?\",\n        answer:\n            `return the nearest ancestor that match with css-selector `,\n    },\n\n];\n\nexport default function TraversingDOMQuestions() {\n    return <ul>\n        {questions.map((q) => (\n            <Question question={q.question} answer={q.answer}/>\n        ))}\n    </ul>\n}","import Question from \"../../Question.jsx\";\nimport React from \"react\";\n\nlet questions = [\n    {\n        question: \" What is Event?\",\n        answer:\n            ` An HTML event can be something the browser does, or something a user does.`,\n\n    },\n    {\n        question: \"List some examples of HTML events:\",\n        answer:\n            `- An HTML web page has finished loading;<br>\n             - An HTML input field was changed; <br>\n             - An HTML button was clicked`,\n    },\n    {\n        question: \"What is Event Listener(Handler)?\",\n        answer:\n            ` An event listener is a procedure in JavaScript that waits for an event to occur <br>\n               //.2.1\n                let button_c = document.querySelector(\"button\");  <br>\n               //.2.2\n                 let eventHandler = () => {\n                 console.log(\"button clicked\"); }; <br>\n                //.2.3\n                // button_c.addEventListener(\"click\", eventHandler);`,\n    },\n    {\n        question: \"Name Two type of events\",\n        answer:\n            `  1.Browser Events; <br>\n               2.User Events; `,\n\n    },\n    {\n        question: \"What the removeEventListener() does?\",\n        answer:\n            `  Remove an event that has been attached with the addEventListener() method. `,\n\n    },\n    {\n        question: \"Name some examples of JavaScript Events\",\n        answer:\n            `  - change: An HTML element has been changed; <br>\n               - click: The user clicks an HTML element; <br>\n               - mouseover: The user moves the mouse over an HTML element or its children; <br>\n               - mouseenter: the user moves the mouse into an HTML element; <br>\n               - mousemove: The user moves the mouse inside an HTML element; <br>\n               - mouseout: The user moves the mouse away from an HTML element; <br>\n               - keydown: The user pushes a keyboard key; <br>\n               - load: The browser has finished loading the page; <br>\n               - submit: The user submits a form; <br>\n               - keyup: The user releases a key on the keyboard  `,\n    },\n\n    {\n        question: \"What means Event Bubbling?\",\n        answer:\n            `  Means when listener of an element listen the triggering of event, it will inform upper levels, if they have listener for the same event. `,\n\n    },\n    {\n        question: \"What means  event bubbling phase? \",\n        answer:\n            ` The bubbling phase, where the event bubbles up from the originating node to the parent element, grandparent, and all the way up to window.`,\n    },\n    {\n        question: \"What is Event Propagation? \",\n        answer:\n            `  Event propagation occurs when an event is fired on a DOM element. The event is also triggered by the parent elements.`,\n    },\n    {\n        question: \"What does the event.stopPropagation()? \",\n        answer:\n            `  The event.stopPropagation() method stops the bubbling of an event to parent elements, preventing any parent event handlers from being executed.`,\n    },\n    {\n        question: \"What is the event capturing? \",\n        answer:\n            ` Event capturing is the reverse of event bubbling. This means that events starts from the window all the way to the element that triggered the event.\n\n`,\n    },\n    {\n        question: \"Name the three Event Propagation phases.\",\n        answer:\n            ` 1 - capturing phase — event starts from window then goes down all the way to child elements until it reaches the target element. <br>\n              2 - target phase — event has reached the target element. <br>\n              3 - bubbling — event bubbles up from the target element and goes up all the way to the window.`,\n    },\n\n];\n\nexport default function Events() {\n    return <ul>\n        {questions.map((q) => (\n            <Question question={q.question} answer={q.answer}/>\n        ))}\n    </ul>\n}","import Question from \"../../Question.jsx\";\nimport React from \"react\";\n\nlet questions = [\n    {\n        question: \" What is AddEventListener?\",\n        answer:\n            ` An HTML event can be something the browser does, or something a user does.`,\n\n    },\n    {\n        question: \"List some examples of HTML events:\",\n        answer:\n            `- An HTML web page has finished loading;<br>\n             - An HTML input field was changed; <br>\n             - An HTML button was clicked`,\n    },\n    {\n        question: \"What is Event Listener(Handler)?\",\n        answer:\n            ` An event listener is a procedure in JavaScript that waits for an event to occur <br>\n               //.2.1\n                let button_c = document.querySelector(\"button\");  <br>\n               //.2.2\n                 let eventHandler = () => {\n                 console.log(\"button clicked\"); }; <br>\n                //.2.3\n                // button_c.addEventListener(\"click\", eventHandler);`,\n    },\n    {\n        question: \"Name Two type of events\",\n        answer:\n            `  1.Browser Events; <br>\n               2.User Events; `,\n\n    },\n    {\n        question: \"What the removeEventListener() does?\",\n        answer:\n            `  Remove an event that has been attached with the addEventListener() method. `,\n\n    },\n    {\n        question: \"Name some examples of JavaScript Events\",\n        answer:\n            `  - change: An HTML element has been changed; <br>\n               - click: The user clicks an HTML element; <br>\n               - mouseover: The user moves the mouse over an HTML element or its children; <br>\n               - mouseenter: the user moves the mouse into an HTML element; <br>\n               - mousemove: The user moves the mouse inside an HTML element; <br>\n               - mouseout: The user moves the mouse away from an HTML element; <br>\n               - keydown: The user pushes a keyboard key; <br>\n               - load: The browser has finished loading the page; <br>\n               - submit: The user submits a form; <br>\n               - keyup: The user releases a key on the keyboard  `,\n    },\n\n    {\n        question: \"What means Event Bubbling?\",\n        answer:\n            `  Means when listener of an element listen the triggering of event, it will inform upper levels, if they have listener for the same event. `,\n\n    },\n    {\n        question: \"What means  event bubbling phase? \",\n        answer:\n            ` The bubbling phase, where the event bubbles up from the originating node to the parent element, grandparent, and all the way up to window.`,\n    },\n    {\n        question: \"What is Event Propagation? \",\n        answer:\n            `  Event propagation occurs when an event is fired on a DOM element. The event is also triggered by the parent elements.`,\n    },\n    {\n        question: \"What does the event.stopPropagation()? \",\n        answer:\n            `  The event.stopPropagation() method stops the bubbling of an event to parent elements, preventing any parent event handlers from being executed.`,\n    },\n    {\n        question: \"What is the event capturing? \",\n        answer:\n            ` Event capturing is the reverse of event bubbling. This means that events starts from the window all the way to the element that triggered the event.\n\n`,\n    },\n    {\n        question: \"Name the three Event Propagation phases.\",\n        answer:\n            ` 1 - capturing phase — event starts from window then goes down all the way to child elements until it reaches the target element. <br>\n              2 - target phase — event has reached the target element. <br>\n              3 - bubbling — event bubbles up from the target element and goes up all the way to the window.`,\n    },\n\n];\n\nexport default function AddEventListener() {\n    return <ul>\n        {questions.map((q) => (\n            <Question question={q.question} answer={q.answer}/>\n        ))}\n    </ul>\n}","import Question from \"../../Question.jsx\";\nimport React from \"react\";\n\nlet questions = [\n    {\n        question: \" What is Remove EventListener?\",\n        answer:\n            ` An HTML event can be something the browser does, or something a user does.`,\n\n    },\n    {\n        question: \"List some examples of HTML events:\",\n        answer:\n            `- An HTML web page has finished loading;<br>\n             - An HTML input field was changed; <br>\n             - An HTML button was clicked`,\n    },\n    {\n        question: \"What is Event Listener(Handler)?\",\n        answer:\n            ` An event listener is a procedure in JavaScript that waits for an event to occur <br>\n               //.2.1\n                let button_c = document.querySelector(\"button\");  <br>\n               //.2.2\n                 let eventHandler = () => {\n                 console.log(\"button clicked\"); }; <br>\n                //.2.3\n                // button_c.addEventListener(\"click\", eventHandler);`,\n    },\n    {\n        question: \"Name Two type of events\",\n        answer:\n            `  1.Browser Events; <br>\n               2.User Events; `,\n\n    },\n    {\n        question: \"What the removeEventListener() does?\",\n        answer:\n            `  Remove an event that has been attached with the addEventListener() method. `,\n\n    },\n    {\n        question: \"Name some examples of JavaScript Events\",\n        answer:\n            `  - change: An HTML element has been changed; <br>\n               - click: The user clicks an HTML element; <br>\n               - mouseover: The user moves the mouse over an HTML element or its children; <br>\n               - mouseenter: the user moves the mouse into an HTML element; <br>\n               - mousemove: The user moves the mouse inside an HTML element; <br>\n               - mouseout: The user moves the mouse away from an HTML element; <br>\n               - keydown: The user pushes a keyboard key; <br>\n               - load: The browser has finished loading the page; <br>\n               - submit: The user submits a form; <br>\n               - keyup: The user releases a key on the keyboard  `,\n    },\n\n    {\n        question: \"What means Event Bubbling?\",\n        answer:\n            `  Means when listener of an element listen the triggering of event, it will inform upper levels, if they have listener for the same event. `,\n\n    },\n    {\n        question: \"What means  event bubbling phase? \",\n        answer:\n            ` The bubbling phase, where the event bubbles up from the originating node to the parent element, grandparent, and all the way up to window.`,\n    },\n    {\n        question: \"What is Event Propagation? \",\n        answer:\n            `  Event propagation occurs when an event is fired on a DOM element. The event is also triggered by the parent elements.`,\n    },\n    {\n        question: \"What does the event.stopPropagation()? \",\n        answer:\n            `  The event.stopPropagation() method stops the bubbling of an event to parent elements, preventing any parent event handlers from being executed.`,\n    },\n    {\n        question: \"What is the event capturing? \",\n        answer:\n            ` Event capturing is the reverse of event bubbling. This means that events starts from the window all the way to the element that triggered the event.\n\n`,\n    },\n    {\n        question: \"Name the three Event Propagation phases.\",\n        answer:\n            ` 1 - capturing phase — event starts from window then goes down all the way to child elements until it reaches the target element. <br>\n              2 - target phase — event has reached the target element. <br>\n              3 - bubbling — event bubbles up from the target element and goes up all the way to the window.`,\n    },\n\n];\n\nexport default function RemoveEventListener() {\n    return <ul>\n        {questions.map((q) => (\n            <Question question={q.question} answer={q.answer}/>\n        ))}\n    </ul>\n}","import Question from \"../../Question.jsx\";\nimport React from \"react\";\n\nlet questions = [\n    {\n        question: \"What is Event Propagation? ?\",\n        answer:\n            ` An HTML event can be something the browser does, or something a user does.`,\n\n    },\n    {\n        question: \"List some examples of HTML events:\",\n        answer:\n            `- An HTML web page has finished loading;<br>\n             - An HTML input field was changed; <br>\n             - An HTML button was clicked`,\n    },\n    {\n        question: \"What is Event Listener(Handler)?\",\n        answer:\n            ` An event listener is a procedure in JavaScript that waits for an event to occur <br>\n               //.2.1\n                let button_c = document.querySelector(\"button\");  <br>\n               //.2.2\n                 let eventHandler = () => {\n                 console.log(\"button clicked\"); }; <br>\n                //.2.3\n                // button_c.addEventListener(\"click\", eventHandler);`,\n    },\n    {\n        question: \"Name Two type of events\",\n        answer:\n            `  1.Browser Events; <br>\n               2.User Events; `,\n\n    },\n    {\n        question: \"What the removeEventListener() does?\",\n        answer:\n            `  Remove an event that has been attached with the addEventListener() method. `,\n\n    },\n    {\n        question: \"Name some examples of JavaScript Events\",\n        answer:\n            `  - change: An HTML element has been changed; <br>\n               - click: The user clicks an HTML element; <br>\n               - mouseover: The user moves the mouse over an HTML element or its children; <br>\n               - mouseenter: the user moves the mouse into an HTML element; <br>\n               - mousemove: The user moves the mouse inside an HTML element; <br>\n               - mouseout: The user moves the mouse away from an HTML element; <br>\n               - keydown: The user pushes a keyboard key; <br>\n               - load: The browser has finished loading the page; <br>\n               - submit: The user submits a form; <br>\n               - keyup: The user releases a key on the keyboard  `,\n    },\n\n    {\n        question: \"What means Event Bubbling?\",\n        answer:\n            `  Means when listener of an element listen the triggering of event, it will inform upper levels, if they have listener for the same event. `,\n\n    },\n    {\n        question: \"What means  event bubbling phase? \",\n        answer:\n            ` The bubbling phase, where the event bubbles up from the originating node to the parent element, grandparent, and all the way up to window.`,\n    },\n    {\n        question: \"What is Event Propagation? \",\n        answer:\n            `  Event propagation occurs when an event is fired on a DOM element. The event is also triggered by the parent elements.`,\n    },\n    {\n        question: \"What does the event.stopPropagation()? \",\n        answer:\n            `  The event.stopPropagation() method stops the bubbling of an event to parent elements, preventing any parent event handlers from being executed.`,\n    },\n    {\n        question: \"What is the event capturing? \",\n        answer:\n            ` Event capturing is the reverse of event bubbling. This means that events starts from the window all the way to the element that triggered the event.\n\n`,\n    },\n    {\n        question: \"Name the three Event Propagation phases.\",\n        answer:\n            ` 1 - capturing phase — event starts from window then goes down all the way to child elements until it reaches the target element. <br>\n              2 - target phase — event has reached the target element. <br>\n              3 - bubbling — event bubbles up from the target element and goes up all the way to the window.`,\n    },\n\n];\n\nexport default function Propagation() {\n    return <ul>\n        {questions.map((q) => (\n            <Question question={q.question} answer={q.answer}/>\n        ))}\n    </ul>\n}","import React, {} from 'react';\nimport {Link, Switch, Route} from \"react-router-dom\";\nimport {useRouteMatch} from \"react-router\";\nimport Events from \"./Events\";\nimport AddEventListener from \"./AddEventListener\";\nimport RemoveEventListener from \"./RemoveEventListener\";\nimport Propagation from \"./Propagation\";\n\nfunction UserBrowserEvents(props) {\n    const {path, url} = useRouteMatch()\n    return (\n        <>\n            <h1>Browser Events</h1>\n            <ul>\n                <li>\n                    <Link to={`${url}/events`}>Events</Link>\n                </li>\n                <li>\n                    <Link to={`${url}/addEventListener`}>AddEventListener</Link>\n                </li>\n                <li>\n                    <Link to={`${url}/removeEventListener`}>RemoveEventListener</Link>\n                </li>\n                <li>\n                    <Link to={`${url}/propagation`}>Propagation</Link>\n                </li>\n            </ul>\n\n            <Switch>\n                <Route path={`${path}/events`} component={Events}/>\n                <Route path={`${path}/addEventListener`} component={AddEventListener}/>\n                <Route path={`${path}/removeEventListener`} component={RemoveEventListener}/>\n                <Route path={`${path}/propagation`} component={Propagation}/>\n            </Switch>\n        </>\n    );\n}\n\nexport default UserBrowserEvents;","import \"./App.css\";\nimport React, {useState} from \"react\";\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\nimport Home from \"./Components/Content/Home\";\nimport Dom from \"./Components/Content/DOM/DOM\";\nimport DOMManipulating from \"./Components/Content/DOM/ManiputatingDOMQuestions\";\nimport DOMIntroduction from \"./Components/Content/DOM/IntroductionDOMQuestions\";\nimport TraversingDOMQuestions from \"./Components/Content/DOM/TraversingDOMQuestions\";\nimport BrowserEvents from \"./Components/Content/DOM/UserBrowserEvents\";\n\n\nfunction App() {\n    const [selectedTab, setSelectedTab] = useState(\"dom\");\n    const selectTopic = function (e) {\n        setSelectedTab(e.target.name);\n    };\n\n    return (\n        <Router>\n            <ul className=\"nav  nav-tabs\">\n                <li className=\"nav-item\">\n                    <Link exact className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/dom\">DOM</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/modules\">Modules</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/promise\">Promise</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/json\">JSON</Link>\n                </li>\n            </ul>\n\n            <Switch>\n                <Route path=\"/\" exact component={Home}/>\n                <Route path=\"/dom\"  component={Dom}/>\n                <Route path=\"/dom/introduction\" component={DOMIntroduction}/>\n                <Route path=\"/dom/manipulating\" component={DOMManipulating}/>\n                <Route path=\"/dom/traversing\" component={TraversingDOMQuestions}/>\n                <Route path=\"/dom/browserEvents\" component={BrowserEvents}/>\n            </Switch>\n\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}